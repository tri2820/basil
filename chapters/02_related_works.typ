#import "../chapter.typ": chapter;

#show: chapter

= Related Works
Traditionally, sandbox systems in the browser have been built using native web technologies such as iframes, Web Workers, and Service Workers @181092. While requiring minimal setup, these technologies pose unique security and accessibility challenges @10_1145_3038912_3052634. They also introduce significant communication overhead @180870 as their security model isolates third-party apps in separate threads. The rendering process requires observing mutations in the iframe’s DOM and synchronizing its state with the main thread’s DOM. This technique, known as remote rendering, is still useful when the app is light and simple. It is employed by Shopify to render customizable post-purchase pages for merchants @freund2021. Communication overhead becomes more noticeable when multiple apps are run simultaneously, as they may interact with each other and share state. There have been attempts to reduce the communication overhead, notably through the Near Membrane implementation by Salesforce @salesforce2024.

Another attempt at sandboxing leverages WebAssembly (WASM). While WASM provides an isolated environment for running third-party code, it is not a complete solution. WASM allows for executing a JavaScript runtime @10429970 within a sandbox, but it lacks direct access to the DOM and the ability to share JavaScript objects @fi15080275. As a result, code running in the sandbox cannot interact directly with the platform. This limitation can be addressed by writing glue code that exposes platform APIs to the sandboxed environment @chen2019; however, the solution is not scalable and is limited to specific, well-defined use cases.

Another approach to sandboxing is language-based analysis and code sanitization, as demonstrated by the Caja compiler @miller2008. This method offers a low runtime performance penalty, but when used with dynamic or interpreted languages like JavaScript, it may introduce vulnerabilities due to code executed at runtime was not originally part of the program’s source code. Although our implementation incorporates elements of this approach, the main security mechanism is still based on environment isolation.
